### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AlgoliaJob {
  company: Company
  description: String
  experience: String
  expiredOn: String
  id: String
  isAvailable: String
  jobInfoUrl: String
  postedBy: User
  publishedOn: String
  remoteFriendly: String
  source: String
  title: String
  type: String
}

type Channel {
  channel: String
  createdby: String
  createdon: String
  id: String
  image: String
  last_message: String
  last_message_on: String
  name: String
  type: String
  unreadMessages: Int
}

type Company {
  domain: String
  location: String
  logo: String
  name: String
}

input createChannelInputType {
  channelMemberId: String
  type: String
}

input createMessageInputType {
  channel: String
  message: String
}

input createOrganisationType {
  domain: String!
  name: String
}

type DefaultCountType {
  error: String
  total: Int
}

type DefaultPayloadType {
  email_verified: Boolean
  error: String
  generatedId: String
  id: String
  message: String
  role: String
}

type Donation {
  amount: String
  date: String
  id: String
  method: String
  type: String
}

type Feed {
  cursor: String
  messages: [Message]
}

type Inbox {
  channels: [Channel]
  cursor: String
}

type Job {
  company: Company
  description: String
  experience: String
  expiredOn: String
  id: String
  isAvailable: Boolean
  jobInfoUrl: String
  postedBy: User
  publishedOn: String
  remoteFriendly: Boolean
  source: String
  title: String
  type: String
}

type JobFeed {
  jobFeed: [Job]
  lastKey: String
}

input JobFilter {
  experience: String
  location: String
  remoteFriendly: Boolean
  type: String
}

type JobListInfo {
  currentPage: Int
  jobFeed: [AlgoliaJob]
  totalJobs: String
  totalPage: Int
}

type Message {
  channel: String
  createdon: String
  file: String
  filename: String
  filetype: String
  id: String
  message: String
  sender: String
}

type Mutation {
  approveUserByAdmin(approved: Boolean, id: String!): DefaultPayloadType
  checkOrganisationByNameAndDomain(domain: String!, name: String!): Organisation
  createChannel(input: createChannelInputType): Channel
  createJob(company: updateCompanyType, description: String, experience: String, jobInfoUrl: String, logoImageFile: String, remoteFriendly: Boolean!, source: String, title: String!, type: String!): Job
  createMessage(input: createMessageInputType): Message
  createOrganisation(input: createOrganisationType): DefaultPayloadType
  createSocialUser(role: String!, signup_access_token: String!, updateAuth0: Boolean!): DefaultPayloadType
  createTag(text: String!): DefaultPayloadType
  createUpdate(author: String!, body: String!, product: String!, publishedon: String, title: String!, type: String!): DefaultPayloadType
  createUser(email: String, id: String, username: String): User
  deleteAllJobs: DefaultPayloadType
  deleteJob(id: String!): DefaultPayloadType
  deleteOrganisationByAdmin(id: String!): DefaultPayloadType
  deleteTagByAdmin(id: String!): DefaultPayloadType
  deleteUpdate(id: String!): DefaultPayloadType
  deleteUserByAdmin(id: String!): DefaultPayloadType
  deleteUserByOwn(id: String!): DefaultPayloadType
  getFile(channel: String!, file: String!): String
  mergeTagsByAdmin(newTagText: String!, tagsToMerge: [TagInputType]!): DefaultPayloadType
  postNews(body: String, createdBy: String, title: String): DefaultPayloadType
  sendApprovalEmail(id: String): DefaultPayloadType
  setInternalUser(id: String!, isInternal: Boolean!): DefaultPayloadType
  setState(state: String!): DefaultPayloadType
  setUserCreation(accountCreatedOn: String!, id: String!): DefaultPayloadType
  subscriberToken: String
  updateJob(input: updateJobType, logoImageFile: String): DefaultPayloadType
  updateNews(body: String, createdBy: String, title: String, userId: String): DefaultPayloadType
  updateOrganisation(input: updateOrganisationType): DefaultPayloadType
  updateOrganisationByAdmin(input: updateOrganisationType): DefaultPayloadType
  updateUpdateByAdmin(input: updateUpdateType): DefaultPayloadType
  updateUser(input: updateUserType): DefaultPayloadType
  updateUserByAdmin(input: updateUserType): DefaultPayloadType
  uploadAvatar(base64: String!, id: String): DefaultPayloadType
  uploadChannelFile(channel: String!, content: String!, filename: String!, filetype: String!): DefaultPayloadType
  verifyEmail(userinfo_access_token: String!): DefaultPayloadType
}

type News {
  author: String
  authoravatar: String
  body: String
  createdBy: String
  id: String
  product: String
  publishedon: String
  title: String
  type: String
}

type Organisation {
  avatarUrl: String
  createdAt: String
  domain: String
  id: String
  name: String
  status: String
  updatedAt: String
}

type OrganisationFeed {
  lastKey: String
  organisations: [Organisation]
}

type Query {
  adminuser(accounttype: String, id: String, userinfo_access_token: String): User
  channel(id: String): Channel
  channelFeed(cursor: String, id: String!, type: String): Feed
  donations: [Donation]
  getActiveJobsForAdmin: [Job]
  getActiveMentors: [User]
  getActiveUsersByRole(role: String): [User]
  getAllAvailableJobsWithInfiniteScrollingFromAlgolia(filter: JobFilter, page: Int): JobListInfo
  getAllJobs(experience: String, isAvailable: Boolean!, location: String, remoteFriendly: Boolean, type: String): [Job]
  getAllJobsForAdmin: [Job]
  getAllJobsWithInfiniteScrolling(filter: JobFilter, isAvailable: Boolean!, lastKey: String): JobFeed
  getAllNews: [News]
  getAllUsers: [User]
  getApprovedUsersByRole(role: String): [User]
  getBasicUsers: [User]
  getExpiredJobsForAdmin: [Job]
  getInternalUsers: [User]
  getJob(id: String!): Job
  getMoreActiveUsersByRole(filter: UserFilter, lastKey: String, role: String): UserFeed
  getMoreActiveUsersByRoleFromAlgolia(filter: UserFilter, page: Int, role: String, sortByType: String): UserListInfo
  getOrganisationForScrapper(name: String!): Organisation
  getRandomUsers(filter: UserFilter, offset: Int, role: String): UserListInfo
  getToken(id: String!): String
  getTotalActiveUsersByRole(filter: UserFilter, role: String): String
  getTotalJobs(filter: JobFilter, isAvailable: Boolean!): String
  getTotalUsers(approved: Boolean, isAvailable: Boolean): DefaultPayloadType
  getUnapprovedUsersByRole(role: String): [User]
  getUpdateFromAdmin(id: String!): News
  getUserJobs(type: String): [Job]
  getUserJobsFromAlgolia(page: Int, type: String): JobListInfo
  getUsersByRole(role: String): [User]
  getUserTotalJobs: DefaultCountType
  getWaitQueueStatus(id: String!): DefaultPayloadType
  mentees: [User]
  mentors: [User]
  organisation(id: String!): Organisation
  organisationDetailFromAdmin(id: String!): Organisation
  organisationFeed(lastKey: String): OrganisationFeed
  organisationListForAdmin: [Organisation]
  recruiters: [User]
  region: String
  tagList: [TagBaseType]
  tagsByAdmin: [TagBaseType]
  updates: [News]
  updatesWithFilter(productFilter: String, typeFilter: String): [News]
  upload(contentType: String!, objectName: String!, url: String!, userid: String!): UploadType
  user(userinfo_access_token: String): User
  userChannels(cursor: String): Inbox
  userFromAdmin(id: String!): User
  userFullname(id: String!): String
  userProfile(id: String!): User
  users: [User]
}

type TagBaseType {
  id: String
  text: String
}

input TagInputType {
  id: String
  text: String
}

input updateCompanyType {
  domain: String
  location: String
  logo: String
  name: String
}

input updateJobType {
  company: updateCompanyType
  experience: String
  expiredOn: String
  id: String!
  isAvailable: Boolean
  jobInfoUrl: String
  logoImageFile: String
  postedBy: updateUserType
  publishedOn: String
  remoteFriendly: Boolean
  title: String
  type: String
  updatedAt: String
}

input updateOrganisationType {
  domain: String
  id: String!
  name: String
}

input updateUpdateType {
  author: String
  body: String
  error: String
  id: String!
  product: String
  publishedon: String
  title: String
  type: String
  updatedon: String
}

input updateUserType {
  about: String
  accountCreatedOn: String
  accountUpdatedOn: String
  avatarUrl: String
  behance: String
  city: String
  codepen: String
  country: String
  countrystate: String
  dribbble: String
  email: String
  email_verified: Boolean
  employer: String
  facebook: String
  firstname: String
  gender: String
  github: String
  have_perform_role: String
  hear_about_us: String
  id: String
  instagram: String
  isAvailable: Boolean
  isEmployed: Boolean
  isEnabled: Boolean
  isRegistrationWizardCompleted: Boolean
  jobTitle: String
  language: String
  last_login: String
  lastname: String
  latitude: String
  linkedin: String
  location: String
  longitude: String
  medium: String
  name: String
  pinterest: String
  role: String
  slideshare: String
  tags: [TagInputType]
  timezone: String
  twitter: String
  userinfo_access_token: String
  username: String
  website: String
  why_perform_role: String
  years_of_experience: String
  youtube: String
  zipcode: String
}

type UploadType {
  signedUrl: String
}

type User {
  about: String
  accountCreatedOn: String
  approved: Boolean
  avatarUrl: String
  behance: String
  city: String
  codepen: String
  country: String
  countrystate: String
  dribbble: String
  email: String
  email_verified: Boolean
  employer: String
  facebook: String
  firstname: String
  gender: String
  github: String
  have_perform_role: String
  hear_about_us: String
  id: String
  instagram: String
  isAvailable: Boolean
  isEmployed: Boolean
  isEnabled: Boolean
  isInternal: Boolean
  isMentee: Boolean
  isMentor: Boolean
  isRecruiter: Boolean
  isRegistrationWizardCompleted: Boolean
  jobTitle: String
  language: String
  last_login: String
  lastname: String
  latitude: String
  linkedin: String
  location: String
  longitude: String
  medium: String
  name: String
  pinterest: String
  responding_region: String
  role: String
  slideshare: String
  tags: [TagBaseType]
  timezone: String
  twitter: String
  username: String
  website: String
  why_perform_role: String
  years_of_experience: String
  youtube: String
  zipcode: String
}

type UserFeed {
  lastKey: String
  userFeed: [User]
}

input UserFilter {
  city: String
  country: String
  countrystate: String
  gender: String
  language: String
  tag: String
  timezone: String
}

type UserListInfo {
  currentOffset: Int
  currentPage: Int
  filters: String
  totalOffset: Int
  totalPage: Int
  totalUsers: String
  userFeed: [User]
}
